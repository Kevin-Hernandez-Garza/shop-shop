{"version":3,"sources":["assets/spinner.gif","utils/reducers.js","utils/actions.js","app/store.js","utils/helpers.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","defaultState","products","cart","cartOpen","categories","currentCategory","reducer","state","action","type","product","newState","filter","_id","length","map","purchaseQuantity","store","createStore","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","ProductItem","item","dispatch","useDispatch","useSelector","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dd8904b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","// import { useReducer } from \"react\";\nimport {\n  UPDATE_PRODUCTS,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  ADD_TO_CART,\n  ADD_MULTIPLE_TO_CART,\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  CLEAR_CART,\n  TOGGLE_CART\n} from \"./actions\";\n\nconst defaultState = {\n  products: [],\n  cart: [],\n  cartOpen: false,\n  categories: [],\n  currentCategory: '',\n}\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory\n      };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true, \n        cart: [...state.cart, action.product]\n      };\n    \n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n    \n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true, \n        cart: state.cart.map(product => {\n          if(action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        })\n      };\n\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false, \n        cart:[]\n      };\n    \n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen \n      };\n\n    default:\n      return state;\n  }\n};\n\n// export function useProductReducer(initialState) {\n//   return useReducer(reducer, initialState)\n// }\n\nexport default reducer;","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n\n// cart functionality \nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';\n","import { createStore } from '@reduxjs/toolkit';\nimport reducer from '../utils/reducers';\n\nconst store = createStore(reducer);\n\nexport default store;","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n    return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function(e) {\n    const db = request.result;\n    // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n    db.createObjectStore('products', { keyPath: '_id' });\n    db.createObjectStore('categories', { keyPath: '_id' });\n    db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function(e) {\n    console.log('There was an error');\n    };\n\n  // on database open success\n  request.onsuccess = function(e) {\n  // save a reference of the database to the `db` variable\n  db = request.result;\n  // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n  tx = db.transaction(storeName, 'readwrite');\n  // save a reference to that object store\n  store = tx.objectStore(storeName);\n\n  // if there's any errors, let us know\n  db.onerror = function(e) {\n    console.log('error', e);\n  };\n\n  // checking what the value of the method is\n  switch (method) {\n    case 'put':\n      store.put(object);\n      resolve(object);\n      break;\n    case 'get':\n      const all = store.getAll();\n      all.onsuccess = function() {\n        resolve(all.result);\n      };\n      break;\n    case 'delete':\n      store.delete(object._id);\n      break;\n    default:\n      console.log('No valid method');\n      break;\n  }\n  \n\n  // when the transaction is complete, close the connection\n  tx.oncomplete = function() {\n    db.close();\n  };\n};\n  });\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\n// import { useStoreContext} from '../../utils/GlobalState';\nimport {\n  ADD_TO_CART,\n  UPDATE_CART_QUANTITY\n} from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n//  redux hooks\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction ProductItem(item) {\n  // const [state, dispatch] = useStoreContext();\n\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    // find the cart item with the matching id\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n\n    // if there was a match, call UPDATE with a new purchase quantity\n    if(itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id, \n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      // idbPromise('cart', 'put', {\n      //   ...itemInCart,\n      //   purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      // });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1}\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1});\n    }\n  };\n\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { idbPromise } from '../../utils/helpers';\n\nimport ProductItem from '../ProductItem';\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\n// redux hooks\nimport { useDispatch, useSelector } from 'react-redux';\n\n\nfunction ProductList() {\n  // const [state, dispatch] = useStoreContext();\n  const state = useSelector( state => state );\n\n  const dispatch = useDispatch();\n  const { currentCategory } = state;\n  \n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    // if there is data to be stored\n    if (data) {\n      // store data in a global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n\n      // take each product and save it to IndexedDb using the helper function\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      // add else if to check if `loading` is undefined in `useQuery()` hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set global state for offline browsing \n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(\n      (product) => product.category._id === currentCategory\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\n// import { useStoreContext } from '../../utils/GlobalState';\nimport {\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n} from '../../utils/actions';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\n// redux hook to access redux store state and dispatch function\nimport { useDispatch, useSelector } from 'react-redux';\n\n\nfunction CategoryMenu() {\n  // const [state, dispatch] = useStoreContext();\n  \n  const state = useSelector( state => state );\n  const dispatch = useDispatch();\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n  \n  \n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = (id) => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\n// import { useStoreContext } from '../../utils/GlobalState';\nimport {\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY\n} from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\n// redux hook \nimport { useDispatch } from 'react-redux';\n\nconst CartItem = ({ item }) => {\n  // const [, dispatch] = useStoreContext();\n\n  // declaring constant for dispatch function (redux)\n  const dispatch = useDispatch();\n\n  const removeFromCart = item => {\n      dispatch({\n          type: REMOVE_FROM_CART,\n          _id: item._id\n      });\n      idbPromise('cart', 'delete', { ...item});\n  };\n\n  const onChange = (e) => {\n      const value = e.target.value;\n      if(value === '0') {\n          dispatch({\n              type: REMOVE_FROM_CART,\n              _id: item._id\n          });\n      idbPromise('cart', 'delete', {...item});\n      } else {\n          dispatch({\n              type: UPDATE_CART_QUANTITY,\n              _id: item._id,\n              purchaseQuantity: parseInt(value)\n          });\n\n          idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value)});\n      }\n  };\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from 'react';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport './style.css';\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n// importing modules\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { loadStripe } from '@stripe/stripe-js';\n// hook: it executes only when you tell it to\nimport { useLazyQuery } from '@apollo/client';\n// redux hooks: To access the dispatch function & hook to access Redux store state\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n   // const [state, dispatch] = useStoreContext();\n\n   const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n   const dispatch = useDispatch();\n   const state = useSelector( state => state );\n\n   useEffect(() => {\n       async function getCart() {\n           const cart = await idbPromise('cart', 'get');\n           dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart]});\n       };\n\n       if(!state.cart.length) {\n           getCart();\n       }\n   }, [state.cart.length, dispatch]);\n\n   // stripe useEffect hook\n   useEffect(() => {\n       if(data) {\n           stripePromise.then((res) => {\n               res.redirectToCheckout({ sessionId: data.checkout.session });\n           });\n       }\n   }, [data]);\n\n   function toggleCart() {\n       dispatch({ type: TOGGLE_CART });\n   }\n\n   function calculateTotal() {\n       let sum = 0;\n       state.cart.forEach(item => {\n           sum += item.price * item.purchaseQuantity;\n       });\n       return sum.toFixed(2);\n   }\n\n   function submitCheckout() {\n       const productIds = [];\n\n       state.cart.forEach((item) => {\n           for (let i = 0; i < item.purchaseQuantity; i++) {\n               productIds.push(item._id);\n           }\n       });\n\n       getCheckout({\n           variables: { products: productIds }\n       });\n   }\n\n   if(!state.cartOpen) {\n       return (\n           <div className='cart-closed' onClick={toggleCart}>\n               <span \n               role='img'\n               aria-label='trash'>🛒</span>\n           </div>\n       );\n   }\n\n   // console.log(state);\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n      <div>\n          {state.cart.map(item => (\n          <CartItem key={item._id} item={item} />\n          ))}\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n            {\n              Auth.loggedIn() ?\n                <button onClick={submitCheckout}>\n                  Checkout\n                </button>\n                :\n                <span>(log in to check out)</span>\n            }\n          </div>\n        </div>\n       ) : (\n           <h3>\n               <span role='img' aria-label='shocked'>\n                   🙀\n               </span>\n               You haven't added anything to your cart yet!\n           </h3>\n       )}\n    </div>\n  );\n};\n\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\n// import { useStoreContext } from '../utils/GlobalState';\nimport { \n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n } from '../utils/actions';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\nimport Cart from '../components/Cart';\nimport { idbPromise } from '../utils/helpers';\n// redux hooks\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction Detail() {\n  // const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  const { products, cart } = state;\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n    if(itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id, \n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      // idbPromise('cart', 'put', {\n      //   ...itemInCart,\n      //   purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      // });\n    } else {\n    dispatch({\n      type: ADD_TO_CART,\n      product: { ...currentProduct, purchaseQuantity: 1 }\n    });\n    // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n    // idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1});\n  }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n\n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove \n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  // hook\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n      // retrieved from server\n    } else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button \n            disabled={!cart.find(p => p._id === currentProduct._id)}\n            onClick={removeFromCart}\n            >Remove from Cart</button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Jumbotron from '../components/Jumbotron';\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from '../utils/helpers';\n\nfunction Success() {\n    const [addOrder] = useMutation(ADD_ORDER);\n\n    useEffect(() => {\n        async function saveOrder() {\n                const cart = await idbPromise('cart', 'get');\n                const products = cart.map(item => item._id);\n    \n                if(products.length) {\n                    const { data } = await addOrder({ variables: { products } });\n                    const productData = data.addOrder.products;\n    \n                    productData.forEach((item) => {\n                        idbPromise('cart', 'delete', item);\n                    });\n                }\n\n                setTimeout(() => {\n                    window.location.assign('/');\n                }, 3000);\n        }\n        \n        saveOrder();\n    }, [addOrder]);\n\n    return (\n        <div>\n            <Jumbotron>\n                <h1>Success!</h1>\n                <h2>\n                    Thank you for your purchase!\n                </h2>\n                <h2>\n                    You will now be redirected to the homepage\n                </h2>\n            </Jumbotron>\n        </div>\n    );\n};\n\nexport default Success;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n//  import from redux\nimport { Provider } from 'react-redux';\nimport store from './app/store';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport Success from './pages/Success';\n// import { StoreProvider } from './utils/GlobalState';\nimport OrderHistory from './pages/OrderHistory';\n\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          {/* makes the redux store available to connect */}\n          <Provider store={ store }>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route component={NoMatch} />\n            </Switch>\n          </Provider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './app/store';\n\nReactDOM.render(\n  <Provider store={ store }>\n \n    <App />\n\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}